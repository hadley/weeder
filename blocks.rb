require 'pathname'
require 'Date'
require 'FileUtils'

# Weaver class store all the information about a weaver file necessary
# to create the processed latex file

class Weaver
	attr_accessor :file, :blocks, :latex
	
	@blocks = []
	
	def file=(file)
		@file = Pathname.new(file)
		load
	end
	
	def cache_path
		Pathname.new("weaver-cache")
	end
	
	def initialize(file)
		self.file = file
	end
	
	def load
		block_type = {
			"" => Block,
			"=" => LatexBlock,
			"=g" => GraphicBlock,
			"=r" => RBlock
		}
		block_re = /<%(=?[rg]?)\s*(.*?)\s*%>/im
		
		
		@blocks = []

		self.latex = file.read.gsub(block_re) do |match|
			type, contents = $1, $2
			b = block_type[type].new(contents, cache_path)
			@blocks << b
			"#<Block:#{b.object_id}>"
		end
	end
	
	def process
		full_cache_path = file.parent + cache_path
		FileUtils.mkdir_p(full_cache_path)
		File.open(full_cache_path + "code.r", "w") { |f| f.write r_code }
		%x{r -q --no-save < weaver-cache/code.r > weaver-cache/r.log 2>&1}
		process_latex
		File.open(full_cache_path + "output.tex", "w") { |f| f.write r_code }	
		%x{pdflatex %{full_cache_path + "output.tex"}}	
	end
	
	def process_latex
		latex = self.latex.gsub(/#<([a-z]+):(.*?)>/i) { |match|
			id = $2.to_i
			ObjectSpace._id2ref(id.to_i).latex_code
		}
	end
	
	def r_cache
		(file.parent + cache_path + "cache.rdata")
	end
	
	def r_code
		r_header + blocks.map{|b| b.r_code}.join() + r_footer
	end
	
	def r_header
		%{
			# R code generated by weaver 
			# from #{file.realpath} on #{Date.today} 
			# ---------------------------------------------------------
			
			weaver.width <- 8
			weaver.height <- 5
			
			setwd("#{file.parent.realpath}")
			if (file.exists("#{r_cache}")) load("#{r_cache}")
			library(xtable)	
		}.gsub(/^\s*/, "")
	end

	def r_footer
		%{
			save(list = ls(all=TRUE), file= "#{r_cache}")
		}.gsub(/^\s*/, "")
	end
	
	
end

class Block
	attr_accessor :content, :cache_path
	
	def initialize(content, cache_path) 
		self.content = content
		self.cache_path = cache_path
	end
	
	#R code generated by this block
	def r_code
		%{\n##{self}\n} + content + "\n"
	end
	
	def latex_code
	end
	
	#Manipulate R code content to be prettier
	def content
		@content.gsub(/^\s*/, "")
	end
	
	def filename
		hash.to_s(36)
	end

	def cache_file
		cache_path + (filename + ".txt")
	end
end

class LatexBlock < Block

	def r_code
		%{\n##{self}\nsink(file = "#{cache_file}")\n} + content + "\nsink()\n" 
	end
	
	def latex_code
		cache_file.read
	end
end

class RBlock < Block

	def r_code
		%{\n##{self}\nsink(file = "#{cache_file}")\n} + content + "\nsink()\n" 
	end

	def latex_code
		"\\begin{verbatim}\n" + cache_file.read + "\\end{verbatim}"
	end

end

class GraphicBlock < Block
	def cache_file
		cache_path + (filename + ".pdf")
	end
	
	def r_code
		%{\n##{self}\npdf(file = "#{cache_file}", width=weaver.width, height=weaver.height)\n} + content + "\ndev.off()\n"
	end
	def latex_code
		"\\includegraphics{#{cache_file}}"
	end
	
end
